{"ast":null,"code":"var _jsxFileName = \"D:\\\\AuthInMern-Authentication-In-MERN\\\\client\\\\src\\\\components\\\\SecretForm\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport styles from './styles.module.css'; // Import the styles\n// const SecretForm = () => {\n//     const [secret, setSecret] = useState('');\n//     const handleSubmit = async (e) => {\n//         e.preventDefault();\n//         try {\n//             await axios.post('http://localhost:8080/submit-secret', { secretMessage: secret });\n//             // Handle success (e.g., showing a success message)\n//         } catch (error) {\n//             // Handle error (e.g., showing an error message)\n//         }\n//     };\n//     return (\n//         <form onSubmit={handleSubmit} className={styles.secretForm}>\n//             <textarea \n//                 className={styles.secretTextarea}\n//                 value={secret}\n//                 onChange={(e) => setSecret(e.target.value)}\n//                 placeholder=\"Share your secret\"\n//             />\n//             <button type=\"submit\" className={styles.submitButton}>Submit</button>\n//         </form>\n//     );\n// };\n// export default SecretForm;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SecretForm = () => {\n  _s();\n\n  const [secret, setSecret] = useState('');\n  const [error, setError] = useState(\"\"); // Add an error state\n\n  const handleChange = _ref => {\n    let {\n      currentTarget: input\n    } = _ref;\n    setData({ ...data,\n      [input.name]: input.value\n    }); // const handleSubmit = async (e) => {\n    //     e.preventDefault();\n\n    try {\n      // Define the URL where your server is expecting to receive the POST request\n      const url = \"http://localhost:8080/submit-secret\"; // Make the POST request and await the resolved promise, storing the response\n\n      const {\n        data: res\n      } = axios.post(url, {\n        secretMessage: secret\n      }); // Handle success (e.g., showing a success message)\n\n      console.log(res.message);\n      setSecret(''); // Clear the secret message input after successful submission\n    } catch (error) {\n      var _error$response;\n\n      // Handle error (e.g., showing an error message)\n      // Set the error state to the error message received from the server or a default error message\n      setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.message) || \"An error occurred while submitting your secret.\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleChange,\n    className: styles.secretForm,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: styles.secretTextarea,\n      value: secret,\n      onChange: handleChange,\n      placeholder: \"Share your secret\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: styles.submitButton,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 1\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.errorMessage,\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 1\n  }, this);\n};\n\n_s(SecretForm, \"TYtQE3qARkZRKroRp5UnV7Trid4=\");\n\n_c = SecretForm;\nexport default SecretForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SecretForm\");","map":{"version":3,"sources":["D:/AuthInMern-Authentication-In-MERN/client/src/components/SecretForm/index.jsx"],"names":["React","useState","axios","styles","SecretForm","secret","setSecret","error","setError","handleChange","currentTarget","input","setData","data","name","value","url","res","post","secretMessage","console","log","message","response","secretForm","secretTextarea","submitButton","errorMessage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB,C,CAA0C;AAE1C;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,EAAD,CAAlC,CAFqB,CAEmB;;AACxC,QAAMQ,YAAY,GAAG,QAA8B;AAAA,QAA7B;AAAEC,MAAAA,aAAa,EAAEC;AAAjB,KAA6B;AAC/CC,IAAAA,OAAO,CAAC,EAAE,GAAGC,IAAL;AAAW,OAACF,KAAK,CAACG,IAAP,GAAcH,KAAK,CAACI;AAA/B,KAAD,CAAP,CAD+C,CAEnD;AACA;;AAGJ,QAAI;AACJ;AACA,YAAMC,GAAG,GAAG,qCAAZ,CAFI,CAGJ;;AACA,YAAM;AAAEH,QAAAA,IAAI,EAAEI;AAAR,UAAgBf,KAAK,CAACgB,IAAN,CAAWF,GAAX,EAAgB;AAAEG,QAAAA,aAAa,EAAEd;AAAjB,OAAhB,CAAtB,CAJI,CAMJ;;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAG,CAACK,OAAhB;AACAhB,MAAAA,SAAS,CAAC,EAAD,CAAT,CARI,CAQW;AACd,KATD,CASE,OAAOC,KAAP,EAAc;AAAA;;AAChB;AACA;AACAC,MAAAA,QAAQ,CAAC,oBAAAD,KAAK,CAACgB,QAAN,oEAAgBV,IAAhB,CAAqBS,OAArB,KAAgC,iDAAjC,CAAR;AACC;AACA,GApBG;;AAsBJ,sBACA;AAAM,IAAA,QAAQ,EAAEb,YAAhB;AAA8B,IAAA,SAAS,EAAEN,MAAM,CAACqB,UAAhD;AAAA,4BACA;AACI,MAAA,SAAS,EAAErB,MAAM,CAACsB,cADtB;AAEI,MAAA,KAAK,EAAEpB,MAFX;AAGI,MAAA,QAAQ,EAAEI,YAHd;AAII,MAAA,WAAW,EAAC;AAJhB;AAAA;AAAA;AAAA;AAAA,YADA,eAOA;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAEN,MAAM,CAACuB,YAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPA,EAQCnB,KAAK,iBAAI;AAAK,MAAA,SAAS,EAAEJ,MAAM,CAACwB,YAAvB;AAAA,gBAAsCpB;AAAtC;AAAA;AAAA;AAAA;AAAA,YARV;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAYC,CArCD;;GAAMH,U;;KAAAA,U;AAuCN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport styles from './styles.module.css'; // Import the styles\r\n\r\n// const SecretForm = () => {\r\n//     const [secret, setSecret] = useState('');\r\n\r\n//     const handleSubmit = async (e) => {\r\n//         e.preventDefault();\r\n//         try {\r\n            \r\n//             await axios.post('http://localhost:8080/submit-secret', { secretMessage: secret });\r\n//             // Handle success (e.g., showing a success message)\r\n//         } catch (error) {\r\n//             // Handle error (e.g., showing an error message)\r\n//         }\r\n//     };\r\n\r\n//     return (\r\n//         <form onSubmit={handleSubmit} className={styles.secretForm}>\r\n//             <textarea \r\n//                 className={styles.secretTextarea}\r\n//                 value={secret}\r\n//                 onChange={(e) => setSecret(e.target.value)}\r\n//                 placeholder=\"Share your secret\"\r\n//             />\r\n//             <button type=\"submit\" className={styles.submitButton}>Submit</button>\r\n//         </form>\r\n//     );\r\n// };\r\n\r\n// export default SecretForm;\r\n\r\nconst SecretForm = () => {\r\n    const [secret, setSecret] = useState('');\r\n    const [error, setError] = useState(\"\"); // Add an error state\r\n    const handleChange = ({ currentTarget: input }) => {\r\n        setData({ ...data, [input.name]: input.value });\r\n    // const handleSubmit = async (e) => {\r\n    //     e.preventDefault();\r\n        \r\n        \r\ntry {\r\n// Define the URL where your server is expecting to receive the POST request\r\nconst url = \"http://localhost:8080/submit-secret\";\r\n// Make the POST request and await the resolved promise, storing the response\r\nconst { data: res } = axios.post(url, { secretMessage: secret });\r\n\r\n// Handle success (e.g., showing a success message)\r\nconsole.log(res.message);\r\nsetSecret(''); // Clear the secret message input after successful submission\r\n} catch (error) {\r\n// Handle error (e.g., showing an error message)\r\n// Set the error state to the error message received from the server or a default error message\r\nsetError(error.response?.data.message || \"An error occurred while submitting your secret.\");\r\n}\r\n};\r\n\r\nreturn (\r\n<form onSubmit={handleChange} className={styles.secretForm}>\r\n<textarea\r\n    className={styles.secretTextarea}\r\n    value={secret}\r\n    onChange={handleChange}\r\n    placeholder=\"Share your secret\"\r\n/>\r\n<button type=\"submit\" className={styles.submitButton}>Submit</button>\r\n{error && <div className={styles.errorMessage}>{error}</div>}\r\n</form>\r\n);\r\n};\r\n\r\nexport default SecretForm;"]},"metadata":{},"sourceType":"module"}