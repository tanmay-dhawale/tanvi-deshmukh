{"ast":null,"code":"var _jsxFileName = \"D:\\\\AuthInMern-Authentication-In-MERN\\\\client\\\\src\\\\components\\\\Main\\\\index.jsx\",\n    _s = $RefreshSig$();\n\n// src/components/Main/index.jsx\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; // Ensure axios is installed\n\nimport styles from \"./styles.module.css\";\nimport HelloWorldComponent from \"../HelloWorldComponent\"; //import jwt_decode from 'jsonwebtoken';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Main = () => {\n  _s();\n\n  const [isHelloWorldOpen, setHelloWorldOpen] = useState(false);\n  const [hasPublishedSecret, setHasPublishedSecret] = useState(false);\n  const [secretInput, setSecretInput] = useState(\"\");\n  const [secrets, setSecrets] = useState([]); // State to store secrets from server\n  // In your Main component\n  // useEffect(() => {\n  // \tconst fetchSecrets = async () => {\n  // \t  try {\n  // \t\tconst response = await axios.get('http://localhost:8080/secrets');\n  // \t\tsetSecrets(response.data);\n  // \t\tconst token = localStorage.getItem('token');\n  //   \t\tif (token) {\n  //     \tconst decodedToken = jwt_decode(token);\n  //     \tconst userEmail = decodedToken.email;\n  // \t\t}\n  // \t\t// const userEmail = /* Get user's email from somewhere, e.g., JWT or context */;\n  // \t\tsetHasPublishedSecret(response.data.some(secret => secret.email === userEmail));\n  // \t  } catch (error) {\n  // \t\t// Handle error\n  // \t  }\n  // \t};\n  // \tfetchSecrets();\n  //   }, []);\n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n\n  const handleHelloWorldTabClick = () => {\n    setHelloWorldOpen(!isHelloWorldOpen);\n  };\n\n  const handleSecretSubmit = async () => {\n    try {\n      await axios.post('http://localhost:8080/submit-secret', {\n        secretMessage: secretInput\n      });\n      setHasPublishedSecret(true); //fetchSecrets(); // Refresh the list of secrets\n    } catch (error) {// Handle error\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.main_container,\n    children: isHelloWorldOpen && /*#__PURE__*/_jsxDEV(HelloWorldComponent, {\n      secrets: secrets,\n      onClose: () => setHelloWorldOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Main, \"ai1bzy9JXVb+cDAGFxkBvIerQjM=\");\n\n_c = Main;\nexport default Main;\n\nvar _c;\n\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"sources":["D:/AuthInMern-Authentication-In-MERN/client/src/components/Main/index.jsx"],"names":["React","useState","useEffect","axios","styles","HelloWorldComponent","Main","isHelloWorldOpen","setHelloWorldOpen","hasPublishedSecret","setHasPublishedSecret","secretInput","setSecretInput","secrets","setSecrets","handleLogout","localStorage","removeItem","window","location","reload","handleHelloWorldTabClick","handleSecretSubmit","post","secretMessage","error","main_container"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAC3B,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,mBAAP,MAAgC,wBAAhC,C,CACA;;;;AACA,MAAMC,IAAI,GAAG,MAAM;AAAA;;AACjB,QAAM,CAACC,gBAAD,EAAmBC,iBAAnB,IAAwCP,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,EAAD,CAAtC,CAJiB,CAI2B;AAE5C;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGE,QAAMc,YAAY,GAAG,MAAM;AACzBC,IAAAA,YAAY,CAACC,UAAb,CAAwB,OAAxB;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD,GAHD;;AAKA,QAAMC,wBAAwB,GAAG,MAAM;AACrCb,IAAAA,iBAAiB,CAAC,CAACD,gBAAF,CAAjB;AACD,GAFD;;AAIA,QAAMe,kBAAkB,GAAG,YAAY;AACrC,QAAI;AACF,YAAMnB,KAAK,CAACoB,IAAN,CAAW,qCAAX,EAAkD;AAAEC,QAAAA,aAAa,EAAEb;AAAjB,OAAlD,CAAN;AACAD,MAAAA,qBAAqB,CAAC,IAAD,CAArB,CAFE,CAGF;AACD,KAJD,CAIE,OAAOe,KAAP,EAAc,CACd;AACD;AACF,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAErB,MAAM,CAACsB,cAAvB;AAAA,cAEGnB,gBAAgB,iBACf,QAAC,mBAAD;AAAqB,MAAA,OAAO,EAAEM,OAA9B;AAAuC,MAAA,OAAO,EAAE,MAAML,iBAAiB,CAAC,KAAD;AAAvE;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,CAxDD;;GAAMF,I;;KAAAA,I;AA0DN,eAAeA,IAAf","sourcesContent":["// src/components/Main/index.jsx\n\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\"; // Ensure axios is installed\nimport styles from \"./styles.module.css\";\nimport HelloWorldComponent from \"../HelloWorldComponent\";\n//import jwt_decode from 'jsonwebtoken';\nconst Main = () => {\n  const [isHelloWorldOpen, setHelloWorldOpen] = useState(false);\n  const [hasPublishedSecret, setHasPublishedSecret] = useState(false);\n  const [secretInput, setSecretInput] = useState(\"\");\n  const [secrets, setSecrets] = useState([]); // State to store secrets from server\n\n  // In your Main component\n\n// useEffect(() => {\n// \tconst fetchSecrets = async () => {\n// \t  try {\n// \t\tconst response = await axios.get('http://localhost:8080/secrets');\n// \t\tsetSecrets(response.data);\n// \t\tconst token = localStorage.getItem('token');\n//   \t\tif (token) {\n//     \tconst decodedToken = jwt_decode(token);\n//     \tconst userEmail = decodedToken.email;\n// \t\t}\n// \t\t// const userEmail = /* Get user's email from somewhere, e.g., JWT or context */;\n// \t\tsetHasPublishedSecret(response.data.some(secret => secret.email === userEmail));\n// \t  } catch (error) {\n// \t\t// Handle error\n// \t  }\n// \t};\n  \n// \tfetchSecrets();\n//   }, []);\n  \n\n  const handleLogout = () => {\n    localStorage.removeItem(\"token\");\n    window.location.reload();\n  };\n\n  const handleHelloWorldTabClick = () => {\n    setHelloWorldOpen(!isHelloWorldOpen);\n  };\n\n  const handleSecretSubmit = async () => {\n    try {\n      await axios.post('http://localhost:8080/submit-secret', { secretMessage: secretInput });\n      setHasPublishedSecret(true);\n      //fetchSecrets(); // Refresh the list of secrets\n    } catch (error) {\n      // Handle error\n    }\n  };\n\n  return (\n    <div className={styles.main_container}>\n      {/* ... Rest of your JSX ... */}\n      {isHelloWorldOpen && (\n        <HelloWorldComponent secrets={secrets} onClose={() => setHelloWorldOpen(false)} />\n      )}\n    </div>\n  );\n};\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}