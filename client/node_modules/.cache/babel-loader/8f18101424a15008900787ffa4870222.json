{"ast":null,"code":"var _jsxFileName = \"D:\\\\AuthInMern-Authentication-In-MERN\\\\client\\\\src\\\\components\\\\SecretForm\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jwtDecode } from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SecretForm = () => {\n  _s();\n\n  const [secret, setSecret] = useState('');\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const token = localStorage.getItem('token'); // Retrieve the JWT from local storage\n\n    if (token) {\n      try {\n        const decoded = jwtDecode(token); // Decode the JWT to get the user's email\n\n        const userEmail = decoded.email;\n        const url = 'http://localhost:8080/api/users/submit-secret';\n        const payload = {\n          secretMessage: secret,\n          userEmail: userEmail\n        }; // Make the POST request with the payload and the token in the authorization header\n\n        const response = await axios.post(url, payload, {\n          headers: {\n            Authorization: `Bearer ${token}` // Attach the token as a bearer token\n\n          }\n        }); // Handle success\n\n        console.log(response.data); // Log the server's success message\n\n        setSecret(''); // Clear the secret message from the state\n      } catch (error) {\n        var _error$response, _error$response$data;\n\n        // Handle error\n        console.error('An error occurred:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      }\n    } else {\n      console.error('No token found. User must be logged in to submit secrets.');\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: secret,\n      onChange: e => setSecret(e.target.value),\n      placeholder: \"Share your secret\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SecretForm, \"eBSk5t6CrddWa7hDCK6HQ62mq3M=\");\n\n_c = SecretForm;\nexport default SecretForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"SecretForm\");","map":{"version":3,"sources":["D:/AuthInMern-Authentication-In-MERN/client/src/components/SecretForm/index.jsx"],"names":["React","useState","axios","jwtDecode","SecretForm","secret","setSecret","handleSubmit","e","preventDefault","token","localStorage","getItem","decoded","userEmail","email","url","payload","secretMessage","response","post","headers","Authorization","console","log","data","error","message","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,YAA1B;;;AAEA,MAAMC,UAAU,GAAG,MAAM;AAAA;;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMM,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd,CAF8B,CAEe;;AAE7C,QAAIF,KAAJ,EAAW;AACP,UAAI;AACA,cAAMG,OAAO,GAAGV,SAAS,CAACO,KAAD,CAAzB,CADA,CACkC;;AAClC,cAAMI,SAAS,GAAGD,OAAO,CAACE,KAA1B;AAEA,cAAMC,GAAG,GAAG,+CAAZ;AACA,cAAMC,OAAO,GAAG;AAAEC,UAAAA,aAAa,EAAEb,MAAjB;AAAyBS,UAAAA,SAAS,EAAEA;AAApC,SAAhB,CALA,CAOA;;AACA,cAAMK,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAN,CAAWJ,GAAX,EAAgBC,OAAhB,EAAyB;AAC5CI,UAAAA,OAAO,EAAE;AACLC,YAAAA,aAAa,EAAG,UAASZ,KAAM,EAD1B,CAC4B;;AAD5B;AADmC,SAAzB,CAAvB,CARA,CAcA;;AACAa,QAAAA,OAAO,CAACC,GAAR,CAAYL,QAAQ,CAACM,IAArB,EAfA,CAe4B;;AAC5BnB,QAAAA,SAAS,CAAC,EAAD,CAAT,CAhBA,CAgBe;AAClB,OAjBD,CAiBE,OAAOoB,KAAP,EAAc;AAAA;;AACZ;AACAH,QAAAA,OAAO,CAACG,KAAR,CAAc,oBAAd,EAAoC,oBAAAA,KAAK,CAACP,QAAN,4FAAgBM,IAAhB,8EAAsBE,OAAtB,KAAiCD,KAAK,CAACC,OAA3E;AACH;AACJ,KAtBD,MAsBO;AACHJ,MAAAA,OAAO,CAACG,KAAR,CAAc,2DAAd;AACH;AACJ,GA7BD;;AA+BA,sBACI;AAAM,IAAA,QAAQ,EAAEnB,YAAhB;AAAA,4BACI;AACI,MAAA,KAAK,EAAEF,MADX;AAEI,MAAA,QAAQ,EAAGG,CAAD,IAAOF,SAAS,CAACE,CAAC,CAACoB,MAAF,CAASC,KAAV,CAF9B;AAGI,MAAA,WAAW,EAAC;AAHhB;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CA5CD;;GAAMzB,U;;KAAAA,U;AA8CN,eAAeA,UAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\nconst SecretForm = () => {\r\n    const [secret, setSecret] = useState('');\r\n\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n        const token = localStorage.getItem('token'); // Retrieve the JWT from local storage\r\n\r\n        if (token) {\r\n            try {\r\n                const decoded = jwtDecode(token); // Decode the JWT to get the user's email\r\n                const userEmail = decoded.email;\r\n\r\n                const url = 'http://localhost:8080/api/users/submit-secret';\r\n                const payload = { secretMessage: secret, userEmail: userEmail };\r\n\r\n                // Make the POST request with the payload and the token in the authorization header\r\n                const response = await axios.post(url, payload, {\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}` // Attach the token as a bearer token\r\n                    }\r\n                });\r\n\r\n                // Handle success\r\n                console.log(response.data); // Log the server's success message\r\n                setSecret(''); // Clear the secret message from the state\r\n            } catch (error) {\r\n                // Handle error\r\n                console.error('An error occurred:', error.response?.data?.message || error.message);\r\n            }\r\n        } else {\r\n            console.error('No token found. User must be logged in to submit secrets.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea \r\n                value={secret}\r\n                onChange={(e) => setSecret(e.target.value)}\r\n                placeholder=\"Share your secret\"\r\n            />\r\n            <button type=\"submit\">Submit</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default SecretForm;\r\n"]},"metadata":{},"sourceType":"module"}